<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;
{ 
  // control widget
  Program.AddControlWidget("Guytpetj/Sprinkler/sprinkler");
  // parameters
  Program.AddInputField("SprinklerCron1",   "10 4 * * 1,3,5",     "01. Sprinkler Schedule A (Cron) [* * * * *]");
  Program.AddInputField("SprinklerTimes1", "10,10,10,10,10,10",   "02. Sprinkler Active Time (00,00,00,00,00,00) 00 to 99 minutes for each group (G1,G2,G3,G4,G5,G6)");
  //
  Program.AddInputField("SprinklerCron2",   "10 20 * * *",        "03. Sprinkler Schedule B (Cron) [* * * * *]");
  Program.AddInputField("SprinklerTimes2", "10,10,10,10,10,10",   "04. Sprinkler Active Time (00,00,00,00,00,00) 00 to 99 minutes for each group (G1,G2,G3,G4,G5,G6)");
  //
  Program.AddInputField("SprinklerCron3",   "10 22 * * *",        "05. Sprinkler Schedule C (Cron) [* * * * *]");
  Program.AddInputField("SprinklerTimes3", "10,10,10,10,10,10",   "06. Sprinkler Active Time (00,00,00,00,00,00) 00 to 99 minutes for each group (G1,G2,G3,G4,G5,G6)");
  //
  Program.AddInputField("SprinklerPause",   "5",                  "07. Sprinkler Pause Between Groups Time in Seconds");
  //
  Program.AddInputField("SprinklerRain",    "50",                  "08. mm of Rainfall in last 24 hours to Pause Sprinklers");
  Program.AddInputField("SprinklerWind",    "50",                  "09. Maximum Wind Speed (m/s) to Pause Sprinklers");
  //
  Program.AddInputField("SprinklerStart",   "ON",                 "10. Auto Start (at HomeGenie start): ON or OFF");
  //
  Program.AddInputField("GPIOMode",         "PiFaceD",            "11. GPIO or PiFaceD");
  //
});

// run program in background
return true;</ScriptCondition>
  <ScriptSource>//
// Garden Sprinkler Control
// By Peter Guijt
// 27 December 2014 GPIO version
// 18 March 2015 PiFace Digital version
//
// ===============
// Dependencies:
// ===============
// Based on Raspberry Pi "Raspbian w/ Mono 3.2" file system
// File: /usr/local/bin/homegenie/html/pages/control/widgets/Guytpetj/Sprinkler/sprinkler.html
// File: /usr/local/bin/homegenie/html/pages/control/widgets/Guytpetj/Sprinkler/sprinkler.json
// File: /usr/local/bin/homegenie/html/pages/control/widgets/Guytpetj/Sprinkler/Images/sprinkler1.png
// ===============
// Requires Raspberry Pi B+
// ===============
// Based on Kootek 8 Channel DC 5V Relay Module for Arduino Raspberry Pi DSP AVR PIC ARM  
// http://www.amazon.com/gp/product/B00C8O9KHA/ref=oh_aui_detailpage_o06_s01?ie=UTF8&amp;psc=1
// This program only uses 6 of the 8 available relays, allowing room for future expansion
// ===============
// ==PiFace Digital (2) MODE==
// Requires PiFace Digital (2)
// Requires 1000-PiFace_Digital.hgx
// Output0 = Sprinkler system active Led
// Output2 = Group 1 
// Output3 = Group 2 
// Output4 = Group 3 
// Output5 = Group 4 
// Output6 = Group 5 
// Output7 = Group 6 
// ===============
// ==GPIO MODE==
// Requires 1000-GPIO_Modules.hgx (gpio: 19, 20, 21, 22, 23, 24, 25, 26, 27 enabled as output)
// GPIO19 = Sprinkler system active Led - requires 220 or 330 Ohm resistor //// or connect as master switch relay, as per relays below
// GPIO20 = Group 1 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// GPIO21 = Group 2 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// GPIO22 = Group 3 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// GPIO23 = Group 4 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// GPIO24 = Group 5 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// GPIO25 = Group 6 - requires 1K resistor and NPN transistor (2N3904) for relay module pull to ground activation
// ===============
// If only activating 1 or 2 relays at the same time, the 5VDC for the relay board can be provided by the Raspberry Pi B+
// ===============
//
//CRON:
// * * * * * ( 1 2 3 4 5 ) command to execute
//1 =  min (0 to 59)
//2 = hour (0 to 23)
//3 = day of month (1 to 31)  (1-31/2 = odd days, 2-30/2 = even days)
//4 = month (1 to 12)
//5 =  day of week (0 to 6) (0 to 6 are Sunday to Saturday
//
//Both rainfall and wind speed require the " jkUtils-OpenWeatherData" app for input. Ensure you enable and configure this app. 
//
//Program Set-up Parameters:
//01. Sprinkler Schedule A (Cron) [* * * * *]
//02. Sprinkler Active Time (00,00,00,00,00,00) 
//03. Sprinkler Schedule B (Cron) [* * * * *]
//04. Sprinkler Active Time (00,00,00,00,00,00) 
//05. Sprinkler Schedule C (Cron) [* * * * *]
//06. Sprinkler Active Time (00,00,00,00,00,00) 
//07. Sprinkler Pause Between Groups Time in Seconds
//08. mm of Rainfall in last 24 hours to Pause Sprinklers
//09. Maximum Wind Speed (m/s) to Pause Sprinklers
//10. Auto Activate (at HomeGenie start): ON or OFF
//11. GPIO or PiFaceD
//
//
//"If I am only using 4 of the 6 valves (groups) as I only have 4 valves, with a duration time of 10 minutes each. I would enter this..."
//answer: 10,10,10,10,00,00
//
//"So in schedule A, If am only using valves 3 and 4 for 20 minutes and 25 minutes respectively, it would look like this..." 
//answer: 00,00,20,25,00,00
//
// sprinkler solenoid active time  
var Spause = Program.InputField("SprinklerPause").DecimalValue; // pause between sprinkler group activation
// sprinkler schedule
var SCron1 = Program.InputField("SprinklerCron1").Value;  // schedule A based on Cron
var SCron2 = Program.InputField("SprinklerCron2").Value;  // schedule B based on Cron
var SCron3 = Program.InputField("SprinklerCron3").Value;  // schedule C based on Cron
// sprinkler group active time
var StimeA = Program.InputField("SprinklerTimes1").Value; //schedule A groups active time
var StimeB = Program.InputField("SprinklerTimes2").Value; //schedule B groups active time
var StimeC = Program.InputField("SprinklerTimes3").Value; //schedule C groups active time
// weather conditions pausing the sprinkler system
var SRain = Program.InputField("SprinklerRain").Value;  // pause based on mm rain in last 24 hours
var SWind = Program.InputField("SprinklerWind").Value;  // pause based on wind speed
// decoding sprinkler time
double Stime1 = 0;
double Stime2 = 0;
double Stime3 = 0;
double Stime4 = 0;
double Stime5 = 0;
double Stime6 = 0;
// define gpio
var GPIOMode = Program.InputField("GPIOMode").Value;  // set GPIO mode
var gpioDomain = "";
var gpioOnOff = ""; 
var gpioGroup1 = ""; 
var gpioGroup2 = ""; 
var gpioGroup3 = "";
var gpioGroup4 = "";
var gpioGroup5 = "";
var gpioGroup6 = ""; 
//
// Set GPIO or PiFace Digital mode
//
if (GPIOMode == "PiFaceD")
	{
	gpioDomain = "Components.PiFaceDigital";
  	gpioOnOff = "Output0"; // PFIO assigned to this action (On/Off Led or master switch relay)
	gpioGroup1 = "Output2"; // PFIO assigned to group 1
	gpioGroup2 = "Output3"; // PFIO assigned to group 2
	gpioGroup3 = "Output4"; // PFIO assigned to group 3
	gpioGroup4 = "Output5"; // PFIO assigned to group 4
	gpioGroup5 = "Output6"; // PFIO assigned to group 5
	gpioGroup6 = "Output7"; // PFIO assigned to group 6  
	}
else if (GPIOMode == "GPIO")
	{
	gpioDomain = "RaspberryPi.Gpio";
  	gpioOnOff = "GPIO19"; // GPIO assigned to this action (On/Off Led or master switch relay)
	gpioGroup1 = "GPIO20"; // GPIO assigned to group 1
	gpioGroup2 = "GPIO21"; // GPIO assigned to group 2
	gpioGroup3 = "GPIO22"; // GPIO assigned to group 3
	gpioGroup4 = "GPIO23"; // GPIO assigned to group 4
	gpioGroup5 = "GPIO24"; // GPIO assigned to group 5
	gpioGroup6 = "GPIO25"; // GPIO assigned to group 6  
	}
else
	{
  	// force program error to protect Raspberry Pi GPIO and/or PiFace Digital
	gpioDomain = "";
  	gpioOnOff = ""; 
	gpioGroup1 = ""; 
	gpioGroup2 = ""; 
	gpioGroup3 = "";
	gpioGroup4 = "";
	gpioGroup5 = "";
	gpioGroup6 = "";   
	}
//
// apply auto start setting
//
var SStart = Program.InputField("SprinklerStart").Value;  // auto start at HG start
if (SStart == "ON")
   {
		// Sprinkler System On
        Modules.InDomain(gpioDomain).WithAddress(gpioOnOff).On();
        Program.Notify(DateTime.Now.ToString(), "Sprinkler System Activated");
        Program.RaiseEvent("HomeGenie.SprinklerTriggered", "standby", "Sprinkler System");
   }
else if (SStart == "OFF")
   {
		// Sprinkler System Off
        Modules.InDomain(gpioDomain).WithAddress(gpioOnOff).Off();
        Program.Notify(DateTime.Now.ToString(), "Sprinkler System Switched Off");
        Program.RaiseEvent("HomeGenie.SprinklerTriggered", "off", "Sprinkler System");
   }
//
// sprinkler groups subroutine
//
var SprinkleNow = new Action(()=&gt;{
  			//group 1
       	 	if (Stime1 &gt; 0) 
        		{
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group1", "Sprinkler System");
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup1).On();
				Pause(Stime1);
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup1).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "switching", "Sprinkler System");
				Pause(Spause);
        		}
   			//group 2
        	if (Stime2 &gt; 0) 
        		{
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group2", "Sprinkler System");
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup2).On();
				Pause(Stime2);					
         	    Modules.InDomain(gpioDomain).WithAddress(gpioGroup2).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "switching", "Sprinkler System");
				Pause(Spause);
       		 	}
			//group 3
    	    if (Stime3 &gt; 0) 
   		     	{
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group3", "Sprinkler System");
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup3).On();
				Pause(Stime3);
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup3).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "switching", "Sprinkler System");
				Pause(Spause);
     		   	}
			//group 4
    	   	if (Stime4 &gt; 0) 
    	    	{
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group4", "Sprinkler System");
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup4).On();
				Pause(Stime4);
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup4).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "switching", "Sprinkler System");
				Pause(Spause);
  		      	}
 	       //group 5
  	       if (Stime5 &gt; 0) 
  	            {
            	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group5", "Sprinkler System");
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup5).On();
				Pause(Stime5);
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup5).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "switching", "Sprinkler System");
				Pause(Spause);
    	    	}
			//group 6
  		    if (Stime6 &gt; 0) 
   		     	{
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "group6", "Sprinkler System");;
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup6).On();
				Pause(Stime6);
				Modules.InDomain(gpioDomain).WithAddress(gpioGroup6).Off();
              	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "standby", "Sprinkler System");
              	Pause(Spause); // pause not required after last group
        		}
});
//
// sprinkler sytem On or Off 
//
Func&lt;bool&gt; _armdisarm = new Func&lt;bool&gt;(()=&gt;{
  	Program.RunAsyncTask(()=&gt;
	{
        if (Program.Parameter("Status.Level").Value == "0")
        {
          	// Sprinkler System Off
          	Modules.InDomain(gpioDomain).WithAddress(gpioOnOff).Off();
          	Program.Notify(DateTime.Now.ToString(), "Sprinkler System Switched Off");
            Program.RaiseEvent("HomeGenie.SprinklerTriggered", "off", "Sprinkler System");
        }
      	else
        {
          	// Sprinkler System On
        	Modules.InDomain(gpioDomain).WithAddress(gpioOnOff).On();
          	Program.Notify(DateTime.Now.ToString(), "Sprinkler System Activated");
            Program.RaiseEvent("HomeGenie.SprinklerTriggered", "standby", "Sprinkler System");
        }
    });
  	return true; 
});
//
// web service calls handling
//
When.WebServiceCallReceived("HomeAutomation.HomeGenie.Automation", (args) =&gt;  
{
    string[] reqs = ((string)args).Split('/');
    var res = "";
    try
    {
      string command = reqs[2];
      string pid = reqs[1];
      if (pid == Program.Module.Address)
      {
        switch(command)
        {
          case "Control.On":
          // eg. http://hg_address/api/HomeAutomation.HomeGenie.Automation/Control.On
			Program.RaiseEvent("Status.Level", "1", "Sprinkler System");
            Program.RaiseEvent("HomeGenie.SprinklerTriggered", "standby", "Sprinkler System");
          	_armdisarm();
            res = "{ 'ResponseValue' : 'ACTIVE' }";
            break;
          case "Control.Off":
          // eg. http://hg_address/api/HomeAutomation.HomeGenie.Automation/Control.Off
			Program.RaiseEvent("Status.Level", "0", "Sprinkler System");
            Program.RaiseEvent("HomeGenie.SprinklerTriggered", "off", "Sprinkler System");
          	_armdisarm();
            res = "{ 'ResponseValue' : 'OFF' }";
            break;
        }
      }
    } 
    catch (Exception ex) 
    { 
      res = "{ 'ResponseValue' : 'ERROR: " + ex.Message + " " + ex.StackTrace + "' }";
    }
    // unable to process request
    return res;
});
//
// =================
// main program loop
// =================
//
var gpiovalue2 = ""; // required for change gpioOnOff switch status if value has changed by other program or switch
while (Program.IsEnabled)
	{  
//checks if GPIO for Sprinkler System Led is active - check and allow for direct GPIO control activation
  	var gpiovalue = Modules.InDomain(gpioDomain).WithAddress(gpioOnOff).Level.ToString();
  		// change gpioOnOff switch status if value has changed by other program or switch
  		if (gpiovalue2 != gpiovalue)
          {
 			if (gpiovalue == "0")
        		{
          		Program.RaiseEvent("Status.Level", "0", "Sprinkler System");
            	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "off", "Sprinkler System");
        		}
  			else
    			{
    			Program.RaiseEvent("Status.Level", "1", "Sprinkler System");
            	Program.RaiseEvent("HomeGenie.SprinklerTriggered", "standby", "Sprinkler System");
  				}
        	}
  	gpiovalue2 = gpiovalue; 
//Get Weather info
	var owd = Modules.WithName("jkUtils - OpenWeatherData").Get();
	var rain24 = owd.Parameter("jkUtils.OpenWeatherMap.Rain.H24").Value;
	var windspeed = owd.Parameter("jkUtils.OpenWeatherMap.Wind.Speed").Value;
  	if (rain24 == "")
    	{
    	rain24 = "0";
  		}
  	if (windspeed == "")
    	{
    	windspeed = "0";
  		}
//start schedule A
  	if (gpiovalue != "0") 
  		{
    	//run time hour &amp;&amp; rain limit pause &amp;&amp; wind speed pause
    	if (Scheduler.IsScheduling(SCron1) &amp;&amp; 
            (Convert.ToDouble(rain24) &lt; Convert.ToDouble(SRain)) &amp;&amp; 
            (Convert.ToDouble(windspeed) &lt; Convert.ToDouble(SWind))) 
        //if (Scheduler.IsScheduling(SCron1)) 
    		{
            //decoding sprinkler time - convert to seconds
            // 00,00,00,00,00,00 each group time separated by comma
            // number characters to skip, number characters to read
            Stime1 = Convert.ToDouble(StimeA.Substring(0, 2)) * 60;
            Stime2 = Convert.ToDouble(StimeA.Substring(3, 2)) * 60;
            Stime3 = Convert.ToDouble(StimeA.Substring(6, 2)) * 60;
            Stime4 = Convert.ToDouble(StimeA.Substring(9, 2)) * 60;
            Stime5 = Convert.ToDouble(StimeA.Substring(12, 2)) * 60;
            Stime6 = Convert.ToDouble(StimeA.Substring(15, 2)) * 60;
            //
			SprinkleNow();
			}
  		}
//end schedule A
  		//
  		//
//start schedule B
  		if (gpiovalue != "0") 
  		{
    	//run time hour &amp;&amp; rain limit pause &amp;&amp; wind speed pause
    	if (Scheduler.IsScheduling(SCron2) &amp;&amp; 
            (Convert.ToDouble(rain24) &lt; Convert.ToDouble(SRain)) &amp;&amp; 
            (Convert.ToDouble(windspeed) &lt; Convert.ToDouble(SWind))) 
        //if (Scheduler.IsScheduling(SCron2))  
    		{
            //decoding sprinkler time - convert to seconds
            // 00,00,00,00,00,00 each group time separated by comma
            // number characters to skip, number characters to read
            Stime1 = Convert.ToDouble(StimeB.Substring(0, 2)) * 60;
            Stime2 = Convert.ToDouble(StimeB.Substring(3, 2)) * 60;
            Stime3 = Convert.ToDouble(StimeB.Substring(6, 2)) * 60;
            Stime4 = Convert.ToDouble(StimeB.Substring(9, 2)) * 60;
            Stime5 = Convert.ToDouble(StimeB.Substring(12, 2)) * 60;
            Stime6 = Convert.ToDouble(StimeB.Substring(15, 2)) * 60;
            //
			SprinkleNow();
			}
  		}
//end schedule B
  		//
  		//
//start schedule C
  		if (gpiovalue != "0") 
  		{
    	//run time hour &amp;&amp; rain limit pause &amp;&amp; wind speed pause
    	if (Scheduler.IsScheduling(SCron3) &amp;&amp; 
            (Convert.ToDouble(rain24) &lt; Convert.ToDouble(SRain)) &amp;&amp; 
            (Convert.ToDouble(windspeed) &lt; Convert.ToDouble(SWind))) 
        //if (Scheduler.IsScheduling(SCron3))  
    		{
            //decoding sprinkler time - convert to seconds
            // 00,00,00,00,00,00 each group time separated by comma
            // number characters to skip, number characters to read
            Stime1 = Convert.ToDouble(StimeC.Substring(0, 2)) * 60;
            Stime2 = Convert.ToDouble(StimeC.Substring(3, 2)) * 60;
            Stime3 = Convert.ToDouble(StimeC.Substring(6, 2)) * 60;
            Stime4 = Convert.ToDouble(StimeC.Substring(9, 2)) * 60;
            Stime5 = Convert.ToDouble(StimeC.Substring(12, 2)) * 60;
            Stime6 = Convert.ToDouble(StimeC.Substring(15, 2)) * 60;
            //
			SprinkleNow();
			}
  		}
//end schedule C
  		//
        //
//run program every 10 seconds
  		Pause(10);
	}
Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <IsRunning>false</IsRunning>
  <Features />
  <LastConditionEvaluationResult>false</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1001</Address>
  <Name>3). Garden Sprinkler System</Name>
  <Description>Activate sprinkler system (irrigation system) based on CRON scheduler.
This program has 3 individual programmable schedules for both time and sprinkler groups.

!!!!! Make sure that Schedule A, B and C do not overlap in time !!!!!

Go to "Edit" and "Program Code" for more instructions about the configuration and hardware requirements for this module.

</Description>
  <Group>SprinklerNew</Group>
  <ActivationTime xsi:nil="true" />
  <TriggerTime xsi:nil="true" />
  <Type>CSharp</Type>
  <IsEnabled>false</IsEnabled>
</ProgramBlock>
